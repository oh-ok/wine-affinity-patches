diff --git a/dlls/dxcore/Makefile.in b/dlls/dxcore/Makefile.in
index 3a1d12c73e5..42269825d70 100644
--- a/dlls/dxcore/Makefile.in
+++ b/dlls/dxcore/Makefile.in
@@ -1,4 +1,8 @@
 MODULE = dxcore.dll
+IMPORTLIB = dxcore
+IMPORTS = dxgi dxguid uuid wined3d user32 win32u
 
 SOURCES = \
-	main.c
+	main.c \
+	factory.c \
+	adapter.c
diff --git a/dlls/dxcore/adapter.c b/dlls/dxcore/adapter.c
new file mode 100644
index 00000000000..21f4ff8c96b
--- /dev/null
+++ b/dlls/dxcore/adapter.c
@@ -0,0 +1,342 @@
+#include "private.h"
+
+WINE_DEFAULT_DEBUG_CHANNEL(dxcore);
+
+
+// -- IDXCoreAdapter --
+static inline struct dxcore_adapter *impl_from_IDXCoreAdapter(IDXCoreAdapter *iface)
+{
+    return CONTAINING_RECORD(iface, struct dxcore_adapter, IDXCoreAdapter_iface);
+}
+
+
+HRESULT dxcore_adapter_pInstanceLuid(struct dxcore_adapter *this, size_t lenBuffer, void *buffer) {
+    HRESULT hr;
+    DXGI_ADAPTER_DESC desc;
+
+    if (lenBuffer < sizeof(LUID))
+        return E_INVALIDARG;
+
+    hr = IDXGIAdapter_GetDesc(this->adapter, &desc);
+    if (FAILED(hr))
+        return hr;
+
+    memcpy(buffer, (void*)&desc.AdapterLuid, sizeof(&desc.AdapterLuid));
+    return S_OK;
+}
+HRESULT dxcore_adapter_pDriverVersion(struct dxcore_adapter *this, size_t lenBuffer, void *buffer) {
+    HRESULT hr;
+    LARGE_INTEGER res;
+    if (lenBuffer < sizeof(uint64_t))
+        return E_INVALIDARG;
+
+    hr = IDXGIAdapter_CheckInterfaceSupport(this->adapter, &IID_IDXGIDevice, &res);
+    TRACE("Driver version; h %ld, l %ld, q %lld.\n", res.HighPart, res.LowPart, res.QuadPart);
+    memcpy(buffer, &res, sizeof(res));
+    return hr;
+}
+HRESULT dxcore_adapter_pDriverDescription(struct dxcore_adapter *this, size_t lenBuffer, void *buffer) {
+    HRESULT hr;
+    size_t len;
+    DXGI_ADAPTER_DESC desc;
+
+    hr = IDXGIAdapter_GetDesc(this->adapter, &desc);
+    if (FAILED(hr))
+        return hr;
+
+    len = wcslen(desc.Description);
+
+    if (lenBuffer < len+1)
+        return E_INVALIDARG;
+
+    wcstombs(buffer, desc.Description, sizeof(desc.Description));
+    TRACE("Driver Description: '%s'\n", (char *)buffer);
+    return S_OK;
+}
+HRESULT dxcore_adapter_pHardwareID(struct dxcore_adapter *this, size_t lenBuffer, void *buffer) {
+    HRESULT hr;
+    DXGI_ADAPTER_DESC desc;
+    DXCoreHardwareID result;
+
+    if (lenBuffer < sizeof(result))
+        return E_INVALIDARG;
+
+    if (FAILED(hr = IDXGIAdapter_GetDesc(this->adapter, &desc)))
+        return hr;
+
+    result.vendorID = desc.VendorId;
+    result.deviceID = desc.DeviceId;
+    result.subSysID = desc.SubSysId;
+    result.revision = desc.Revision;
+
+    memcpy(buffer, &result, sizeof(result));
+    return S_OK;
+}
+// ...
+HRESULT dxcore_adapter_pIsHardware(struct dxcore_adapter *this, size_t lenBuffer, void *buffer) {
+    char result = TRUE;
+    if (lenBuffer < sizeof(result))
+        return E_INVALIDARG;
+
+    memcpy(buffer, &result, sizeof(result));
+    return S_OK;
+}
+
+
+HRESULT (*dxcore_adapter_properties[])(struct dxcore_adapter *, size_t, void*) = {
+    dxcore_adapter_pInstanceLuid,
+    dxcore_adapter_pDriverVersion,
+    dxcore_adapter_pDriverDescription,
+    dxcore_adapter_pHardwareID,
+    NULL, // dxcore_adapter_pKmdModelVersion,
+    NULL, // dxcore_adapter_pComputePreemptionGranularity,
+    NULL, // dxcore_adapter_pGraphicsPreemptionGranularity,
+    NULL, // dxcore_adapter_pDedicatedAdapterMemory,
+    NULL, // dxcore_adapter_pDedicatedSystemMemory,
+    NULL, // dxcore_adapter_pSharedSystemMemory,
+    NULL, // dxcore_adapter_pAcgCompatible,
+    dxcore_adapter_pIsHardware,
+    NULL, // dxcore_adapter_pIsIntegrated,
+    NULL, // dxcore_adapter_pIsDetachable,
+    NULL, // dxcore_adapter_pHardwareIDParts,
+    NULL, // dxcore_adapter_pPhysicalAdapterCount,
+    NULL, // dxcore_adapter_pAdapterEngineCount,
+    NULL // dxcore_adapter_pAdapterEngineName
+};
+
+size_t dxcore_adapter_sInstanceLuid(struct dxcore_adapter *adapter) {
+    return sizeof(LUID);
+}
+size_t dxcore_adapter_sDriverVersion(struct dxcore_adapter *adapter) {
+    return sizeof(uint64_t);
+}
+size_t dxcore_adapter_sDriverDescription(struct dxcore_adapter *adapter) {
+    DXGI_ADAPTER_DESC desc;
+    if (FAILED(IDXGIAdapter_GetDesc(adapter->adapter, &desc)))
+        return 0;
+    return wcslen(desc.Description)+1;
+}
+size_t dxcore_adapter_sHardwareID(struct dxcore_adapter *adapter) {
+    return sizeof(DXCoreHardwareID);
+}
+size_t dxcore_adapter_sIsHardware(struct dxcore_adapter *adapter) {
+    return 1;
+}
+
+size_t (*dxcore_adapter_property_sizes[])(struct dxcore_adapter *) = {
+    dxcore_adapter_sInstanceLuid,
+    dxcore_adapter_sDriverVersion,
+    dxcore_adapter_sDriverDescription,
+    dxcore_adapter_sHardwareID,
+    NULL, // dxcore_adapter_pKmdModelVersion,
+    NULL, // dxcore_adapter_pComputePreemptionGranularity,
+    NULL, // dxcore_adapter_pGraphicsPreemptionGranularity,
+    NULL, // dxcore_adapter_pDedicatedAdapterMemory,
+    NULL, // dxcore_adapter_pDedicatedSystemMemory,
+    NULL, // dxcore_adapter_pSharedSystemMemory,
+    NULL, // dxcore_adapter_pAcgCompatible,
+    dxcore_adapter_sIsHardware,
+    NULL, // dxcore_adapter_pIsIntegrated,
+    NULL, // dxcore_adapter_pIsDetachable,
+    NULL, // dxcore_adapter_pHardwareIDParts,
+    NULL, // dxcore_adapter_pPhysicalAdapterCount,
+    NULL, // dxcore_adapter_pAdapterEngineCount,
+    NULL // dxcore_adapter_pAdapterEngineName
+};
+
+
+ULONG STDMETHODCALLTYPE dxcore_adapter_AddRef(IDXCoreAdapter *iface) {
+    LONG count;
+    struct dxcore_adapter *this = impl_from_IDXCoreAdapter(iface);
+
+    count = InterlockedIncrement(&this->refcount);
+    return count;
+}
+
+
+ULONG STDMETHODCALLTYPE dxcore_adapter_Release(IDXCoreAdapter *iface) {
+    LONG count;
+    struct dxcore_adapter *this = impl_from_IDXCoreAdapter(iface);
+
+    count = InterlockedDecrement(&this->refcount);
+    if (!count) {
+        IUnknown_Release(&this->factory->IDXCoreAdapterFactory_iface);
+        free(this);
+    }
+    return count;
+}
+
+
+HRESULT STDMETHODCALLTYPE dxcore_adapter_QueryInterface(IDXCoreAdapter *iface, REFIID riid, void **ppv) {
+    struct dxcore_adapter *this = impl_from_IDXCoreAdapter(iface);
+
+    *ppv = NULL;
+    TRACE("riid %s, factory %p.\n", wine_dbgstr_guid(riid), ppv);
+
+
+    if (IsEqualIID(riid, &IID_IUnknown)
+        ||IsEqualIID(riid, &IID_IDXCoreAdapter))
+    {
+        *ppv = iface;
+        iface->lpVtbl->AddRef(iface);
+        return S_OK;
+    }
+
+    /*
+    -- AFFINITY SPECIFIC --
+    d3d12_main.c/wined3d_get_adapter somehow gets passed this adapter object. To avoid having to rewrite d3d12
+    (which still allow users to inject other d3d implementations), we just return our inner IDXGIAdapter here.
+    */
+    return IUnknown_QueryInterface(this->adapter, riid, ppv);
+}
+
+
+HRESULT STDMETHODCALLTYPE dxcore_adapter_GetFactory(IDXCoreAdapter *iface, REFIID riid, void **ppv) {
+    struct dxcore_adapter *this = impl_from_IDXCoreAdapter(iface);
+    IDXCoreAdapterFactory *factory = &this->factory->IDXCoreAdapterFactory_iface;
+    return IUnknown_QueryInterface(factory, riid, ppv);
+}
+
+
+BOOL STDMETHODCALLTYPE dxcore_adapter_IsPropertySupported(
+    IDXCoreAdapter *this,
+    DXCoreAdapterProperty property
+) {
+    TRACE("property %d\n", property);
+    return !((property >= (sizeof(dxcore_adapter_properties)/sizeof(void*)))
+            || (dxcore_adapter_properties[property] == NULL));
+}
+
+
+HRESULT STDMETHODCALLTYPE dxcore_adapter_GetProperty(
+    IDXCoreAdapter *iface,
+    DXCoreAdapterProperty property, size_t buffer, void *propertyData
+) {
+    struct dxcore_adapter *this = impl_from_IDXCoreAdapter(iface);
+
+    TRACE("property %d, buffer %lld, propertyData %p\n",
+        property, (long long)buffer, propertyData);
+
+    if ((property >= (sizeof(dxcore_adapter_properties)/sizeof(void*)))
+            || (dxcore_adapter_properties[property] == NULL))
+        return DXGI_ERROR_UNSUPPORTED;
+
+    return dxcore_adapter_properties[property](this, buffer, propertyData);
+}
+
+
+HRESULT STDMETHODCALLTYPE dxcore_adapter_GetPropertySize(
+    IDXCoreAdapter *iface,
+    DXCoreAdapterProperty property, size_t *bufferSize
+) {
+    struct dxcore_adapter *this = impl_from_IDXCoreAdapter(iface);
+    TRACE("property %d, bufferSize %p\n", property, bufferSize);
+
+    if ((property >= (sizeof(dxcore_adapter_properties)/sizeof(void*)))
+            || (dxcore_adapter_properties[property] == NULL))
+        return DXGI_ERROR_UNSUPPORTED;
+
+    *bufferSize = dxcore_adapter_property_sizes[property](this);
+    return S_OK;
+}
+
+
+BOOL STDMETHODCALLTYPE dxcore_adapter_IsAttributeSupported(
+    IDXCoreAdapter *this,
+    REFGUID attributeGUID
+) {
+    FIXME("attributeGUID %s stub!\n", wine_dbgstr_guid(attributeGUID));
+    return TRUE;
+}
+
+
+BOOL STDMETHODCALLTYPE dxcore_adapter_IsQueryStateSupported(
+    IDXCoreAdapter *this,
+    DXCoreAdapterState state
+) {
+    FIXME("state %d stub!\n", state);
+    return FALSE;
+}
+
+
+BOOL STDMETHODCALLTYPE dxcore_adapter_IsSetStateSupported(
+    IDXCoreAdapter *this,
+    DXCoreAdapterState state
+) {
+    FIXME("state %d, stub!\n", state);
+    return FALSE;
+}
+
+
+BOOL STDMETHODCALLTYPE dxcore_adapter_IsValid(
+    IDXCoreAdapter *this
+) {
+    FIXME("assuming valid; stub!\n");
+    return TRUE;
+}
+
+
+HRESULT STDMETHODCALLTYPE dxcore_adapter_QueryState(
+    IDXCoreAdapter *this,
+    DXCoreAdapterState state,
+    size_t inputStateDetailsSize,
+    void const *inputStateDetails,
+    size_t outputBufferSize,
+    void * outputBuffer
+) {
+    FIXME("state %d, inputStateDetailSize %lld, inputStateDetails %p, stub!\n",
+        state, (long long)inputStateDetailsSize, inputStateDetails);
+    return DXGI_ERROR_UNSUPPORTED;
+}
+
+HRESULT STDMETHODCALLTYPE dxcore_adapter_SetState(
+    IDXCoreAdapter *this,
+    DXCoreAdapterState state,
+    size_t inputStateDetailsSize,
+    void const *inputStateDetails,
+    size_t inputDataSize,
+    void const *inputData
+) {
+    FIXME("state %d, inputStateDetailsSize %lld, inputStateDetails %p, stub!\n",
+        state, (long long)inputStateDetailsSize, inputStateDetails);
+    return DXGI_ERROR_UNSUPPORTED;
+}
+
+
+static IDXCoreAdapterVtbl dxcore_adapter_vtbl = {
+    dxcore_adapter_QueryInterface,
+    dxcore_adapter_AddRef,
+    dxcore_adapter_Release,
+    dxcore_adapter_IsValid,
+    dxcore_adapter_IsAttributeSupported,
+    dxcore_adapter_IsPropertySupported,
+    dxcore_adapter_GetProperty,
+    dxcore_adapter_GetPropertySize,
+    dxcore_adapter_IsQueryStateSupported,
+    dxcore_adapter_QueryState,
+    dxcore_adapter_IsSetStateSupported,
+    dxcore_adapter_SetState,
+    dxcore_adapter_GetFactory
+};
+
+
+HRESULT dxcore_adapter_create(
+    struct dxcore_factory *factory,
+    IDXGIAdapter *adapter,
+    struct dxcore_adapter **result
+) {
+    struct dxcore_adapter *this;
+
+    if (!(this = calloc(1, sizeof(*this))))
+        return E_OUTOFMEMORY;
+
+    this->refcount = 1;
+    this->IDXCoreAdapter_iface.lpVtbl = &dxcore_adapter_vtbl;
+    this->factory = factory;
+    this->adapter = adapter;
+    IUnknown_AddRef(&factory->IDXCoreAdapterFactory_iface);
+    IUnknown_AddRef(adapter);
+
+    *result = this;
+    return S_OK;
+}
diff --git a/dlls/dxcore/factory.c b/dlls/dxcore/factory.c
new file mode 100644
index 00000000000..093955017a8
--- /dev/null
+++ b/dlls/dxcore/factory.c
@@ -0,0 +1,346 @@
+#include "private.h"
+
+WINE_DEFAULT_DEBUG_CHANNEL(dxcore);
+
+
+// -- IDXCoreAdapterList --
+static inline struct dxcore_adapter_list *impl_from_IDXCoreAdapterList(IDXCoreAdapterList *iface)
+{
+    return CONTAINING_RECORD(iface, struct dxcore_adapter_list, IDXCoreAdapterList_iface);
+}
+
+
+static ULONG STDMETHODCALLTYPE dxcore_adapter_list_AddRef(IDXCoreAdapterList *_this) {
+    ULONG refcount;
+    struct dxcore_adapter_list *this = impl_from_IDXCoreAdapterList(_this);
+
+    refcount = InterlockedIncrement(&this->refcount);
+    return refcount;
+}
+
+
+static ULONG STDMETHODCALLTYPE dxcore_adapter_list_Release(IDXCoreAdapterList *_this) {
+    struct dxcore_adapter_list *this = impl_from_IDXCoreAdapterList(_this);
+
+    ULONG refcount = InterlockedDecrement(&this->refcount);
+    if (!refcount) {
+        IUnknown_Release(&this->factory->IDXCoreAdapterFactory_iface);
+        free(this);
+    }
+    return refcount;
+}
+
+
+static HRESULT STDMETHODCALLTYPE dxcore_adapter_list_QueryInterface(
+    IDXCoreAdapterList *this,
+    REFIID iid, void **factory
+) {
+    *factory = NULL;
+    TRACE("this %p, riid, %s, factory, %p\n", this, wine_dbgstr_guid(iid), factory);
+    if (IsEqualIID(iid, &IID_IDXCoreAdapterList)
+        ||IsEqualIID(iid, &IID_IUnknown))
+    {
+        *factory = this;
+        this->lpVtbl->AddRef(this);
+        return S_OK;
+    }
+    return E_NOINTERFACE;
+}
+
+
+static uint32_t STDMETHODCALLTYPE dxcore_adapter_list_GetAdapterCount(IDXCoreAdapterList *iface) {
+    UINT count;
+    struct dxcore_adapter_list *this = impl_from_IDXCoreAdapterList(iface);
+
+    count = this->len;
+    TRACE("adapter count %d\n", count);
+    return count;
+}
+
+
+static HRESULT STDMETHODCALLTYPE dxcore_adapter_list_GetAdapter(IDXCoreAdapterList *iface, uint32_t index, REFIID riid, void **ppv) {
+    struct dxcore_adapter_list *this = impl_from_IDXCoreAdapterList(iface);
+
+    *ppv = NULL;
+    TRACE("index %d, riid %s, ppv %p\n", index, wine_dbgstr_guid(riid), ppv);
+
+    if (index >= this->len)
+        return E_INVALIDARG;
+
+    return IUnknown_QueryInterface(&this->adapters[index]->IDXCoreAdapter_iface, riid, ppv);
+}
+
+
+static BOOL STDMETHODCALLTYPE dxcore_adapter_list_IsStale(IDXCoreAdapterList *this) {
+    FIXME("stub\n");
+    return FALSE;
+}
+
+
+static HRESULT STDMETHODCALLTYPE dxcore_adapter_list_Sort(
+    IDXCoreAdapterList *this,
+    uint32_t numPreferences, const DXCoreAdapterPreference *preferences
+) {
+    FIXME("numPreferences %d, preferences %p, stub\n", numPreferences, preferences);
+    return E_NOINTERFACE;
+}
+
+
+static HRESULT STDMETHODCALLTYPE dxcore_adapter_list_GetFactory(IDXCoreAdapterList *iface, REFIID riid, void **ppv) {
+    struct dxcore_adapter_list *this = impl_from_IDXCoreAdapterList(iface);
+
+    return IUnknown_QueryInterface(
+        &this->factory->IDXCoreAdapterFactory_iface,
+        riid, ppv
+    );
+}
+
+
+static BOOL STDMETHODCALLTYPE dxcore_adapter_list_IsAdapterPreferenceSupported(
+    IDXCoreAdapterList *this, DXCoreAdapterPreference preference
+) {
+    FIXME("preference %d, stub\n", preference);
+    return FALSE;
+}
+
+
+static const IDXCoreAdapterListVtbl dxcore_adapter_list_vtbl = {
+    dxcore_adapter_list_QueryInterface,
+    dxcore_adapter_list_AddRef,
+    dxcore_adapter_list_Release,
+    dxcore_adapter_list_GetAdapter,
+    dxcore_adapter_list_GetAdapterCount,
+    dxcore_adapter_list_IsStale,
+    dxcore_adapter_list_GetFactory,
+    dxcore_adapter_list_Sort,
+    dxcore_adapter_list_IsAdapterPreferenceSupported
+};
+
+
+static HRESULT dxcore_adapter_list_init(
+    struct dxcore_adapter_list* this,
+    IDXGIFactory *dxgi_factory,
+    const GUID* filter
+) {
+    IDXGIAdapter *adapter;
+    HRESULT hr = 0;
+
+    this->len = 0;
+
+    // note: we're technically ignoring the filterAttributes
+    // feel free to add them if you know how
+
+    // count the adapters
+    while (!hr) {
+        hr = IDXGIFactory_EnumAdapters(
+            dxgi_factory, this->len, &adapter);
+        if (hr)
+            break;
+        IUnknown_Release(adapter);
+        this->len++;
+    }
+    if (!this->len)
+        return S_OK;
+
+    if (!(this->adapters = calloc(this->len, sizeof(struct dxcore_adapter*))))
+        return E_OUTOFMEMORY;
+
+    for (int i=0; i<this->len; i++) {
+        hr = IDXGIFactory_EnumAdapters(
+            dxgi_factory, i, &adapter);
+        if (hr)
+            break;
+        hr = dxcore_adapter_create(this->factory, adapter, &this->adapters[i]);
+        IUnknown_Release(adapter);
+        if (FAILED(hr))
+            break;
+    }
+    return hr;
+}
+
+
+static HRESULT dxcore_adapter_list_create(
+    struct dxcore_factory *factory,
+    uint32_t numAttributes, const GUID* filterAttributes,
+    REFIID riid, void **ppv
+) {
+    HRESULT result;
+    IDXCoreAdapterList *iface;
+    struct dxcore_adapter_list *this;
+    IDXGIFactory *dxgi_factory;
+
+    if (!numAttributes && filterAttributes)
+        return E_INVALIDARG;
+
+    if (FAILED(result = CreateDXGIFactory1(&IID_IDXGIFactory, (void**)&dxgi_factory)))
+        return result;
+
+    if (!(this = calloc(1, sizeof(*this))))
+        return E_OUTOFMEMORY;
+
+    this->refcount = 1;
+    this->dxgi_factory = dxgi_factory;
+    IUnknown_AddRef(&factory->IDXCoreAdapterFactory_iface);
+    this->factory = factory;
+    iface = &this->IDXCoreAdapterList_iface;
+    iface->lpVtbl = &dxcore_adapter_list_vtbl;
+
+    if (FAILED(result = dxcore_adapter_list_init(this, dxgi_factory, filterAttributes))) {
+        IUnknown_Release(iface);
+        return result;
+    }
+
+    result = IUnknown_QueryInterface(iface, riid, ppv);
+    IUnknown_Release(iface);
+    return result;
+}
+
+
+// -- IDXCoreAdapterFactory --
+static struct dxcore_factory *dxcore_factory_singleton = NULL;
+
+
+static inline struct dxcore_factory *impl_from_IDXCoreAdapterFactory(IDXCoreAdapterFactory *iface)
+{
+    return CONTAINING_RECORD(iface, struct dxcore_factory, IDXCoreAdapterFactory_iface);
+}
+
+
+static ULONG STDMETHODCALLTYPE dxcore_factory_AddRef(IDXCoreAdapterFactory *iface) {
+    struct dxcore_factory *this = impl_from_IDXCoreAdapterFactory(iface);
+    return InterlockedIncrement(&this->refcount);
+}
+
+
+static ULONG STDMETHODCALLTYPE dxcore_factory_Release(IDXCoreAdapterFactory *iface) {
+    struct dxcore_factory *this = impl_from_IDXCoreAdapterFactory(iface);
+    ULONG refcount = InterlockedDecrement(&this->refcount);
+
+    if (!refcount) {
+        dxcore_factory_singleton = NULL;
+        free(this);
+    }
+    return refcount;
+}
+
+
+static HRESULT STDMETHODCALLTYPE dxcore_factory_QueryInterface(
+    IDXCoreAdapterFactory *this,
+    REFIID iid, void **factory
+) {
+    *factory = NULL;
+    TRACE("this %p, riid, %s, factory, %p\n", this, wine_dbgstr_guid(iid), factory);
+    if (IsEqualIID(iid, &IID_IDXCoreAdapterFactory)
+            || IsEqualIID(iid, &IID_IUnknown))
+    {
+        *factory = this;
+        this->lpVtbl->AddRef(this);
+        return S_OK;
+    }
+    return E_NOINTERFACE;
+}
+
+
+static HRESULT STDMETHODCALLTYPE dxcore_factory_CreateAdapterList(
+    IDXCoreAdapterFactory *iface,
+    uint32_t num_attributes, const GUID *filter_attributes,
+    REFIID riid, void **ppv
+) {
+    struct dxcore_factory *this = impl_from_IDXCoreAdapterFactory(iface);
+
+    TRACE("num_attributes %d, filter_attributes %p, riid %s, ppv %p\n", 
+        num_attributes, filter_attributes, wine_dbgstr_guid(riid), ppv);
+
+    return dxcore_adapter_list_create(this, num_attributes, filter_attributes, riid, ppv);
+}
+
+static HRESULT STDMETHODCALLTYPE dxcore_factory_GetAdapterByLuid(
+    IDXCoreAdapterFactory *this,
+    REFLUID adapter_luid,
+    REFIID riid, void **ppv
+) {
+    FIXME("this %p, adapter_luid %p, riid %s, ppv %p, stub!\n",
+        this, adapter_luid, wine_dbgstr_guid(riid), ppv);
+    return E_INVALIDARG;
+}
+
+
+static BOOL STDMETHODCALLTYPE dxcore_factory_IsNotificationTypeSupported(
+    IDXCoreAdapterFactory *this,
+    DXCoreNotificationType type
+) {
+    FIXME("type %i\n", type);
+    return (type < 2);
+}
+
+
+static HRESULT STDMETHODCALLTYPE dxcore_factory_RegisterEventNotification(
+    IDXCoreAdapterFactory *this,
+    IUnknown *dxcore_object, DXCoreNotificationType type,
+    PFN_DXCORE_NOTIFICATION_CALLBACK callback, void *callback_context,
+    uint32_t *event_cookie
+) {
+    FIXME("dxcore_object %p, type %d, callback %p, callback_context %p, event_cookie %p\n",
+        dxcore_object, type, callback, callback_context, event_cookie);
+    if (type < 2)
+        return S_OK;
+    return DXGI_ERROR_INVALID_CALL;
+}
+
+
+static HRESULT STDMETHODCALLTYPE dxcore_factory_UnregisterEventNotification(
+    IDXCoreAdapterFactory *this,
+    uint32_t event_cookie
+) {
+    FIXME("event_cookie %d\n", event_cookie);
+    return S_OK;
+}
+
+
+static const struct IDXCoreAdapterFactoryVtbl dxcore_factory_vtbl = {
+    dxcore_factory_QueryInterface,
+    dxcore_factory_AddRef,
+    dxcore_factory_Release,
+    dxcore_factory_CreateAdapterList,
+    dxcore_factory_GetAdapterByLuid,
+    dxcore_factory_IsNotificationTypeSupported,
+    dxcore_factory_RegisterEventNotification,
+    dxcore_factory_UnregisterEventNotification,
+};
+
+
+static HRESULT dxcore_factory_init(struct dxcore_factory *this) {
+    dxcore_factory_singleton = this;
+    this->IDXCoreAdapterFactory_iface.lpVtbl = &dxcore_factory_vtbl;
+    this->refcount = 1;
+
+    return S_OK;
+}
+
+
+HRESULT dxcore_factory_create(REFIID riid, void **ppv) {
+    struct dxcore_factory *this;
+    HRESULT res;
+
+    *ppv = NULL;
+
+    if (dxcore_factory_singleton != NULL) {
+        TRACE("Reusing factory %p\n", dxcore_factory_singleton);
+        return IUnknown_QueryInterface(
+            &dxcore_factory_singleton->IDXCoreAdapterFactory_iface, riid, ppv
+        );
+    }
+
+    if (!(this = calloc(1, sizeof(*this))))
+        return E_OUTOFMEMORY;
+
+    if (FAILED(res = dxcore_factory_init(this))) {
+        WARN("Failed to initialize factory, hr %#lx.\n", res);
+        free(this);
+        return res;
+    }
+
+    TRACE("Created factory %p.\n", this);
+    *ppv = this;
+    return S_OK;
+}
diff --git a/dlls/dxcore/main.c b/dlls/dxcore/main.c
index dcc294d04fa..719ac70fb96 100644
--- a/dlls/dxcore/main.c
+++ b/dlls/dxcore/main.c
@@ -16,13 +16,14 @@
  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA
  */
 
-#include "dxcore.h"
-#include "wine/debug.h"
+#define DXCORE_INIT_GUID
+#include "private.h"
+
 
 WINE_DEFAULT_DEBUG_CHANNEL(dxcore);
 
 HRESULT WINAPI DXCoreCreateAdapterFactory( REFIID riid, void **ppv )
 {
-    FIXME( "riid %s, ppv %p stub!\n", debugstr_guid(riid), ppv );
-    return E_NOINTERFACE;
+    TRACE( "riid %s, ppv %p\n", debugstr_guid(riid), ppv );
+    return dxcore_factory_create(riid, ppv);
 }
diff --git a/dlls/dxcore/private.h b/dlls/dxcore/private.h
new file mode 100644
index 00000000000..1e29addff9f
--- /dev/null
+++ b/dlls/dxcore/private.h
@@ -0,0 +1,49 @@
+#include "wine/debug.h"
+
+#include <assert.h>
+
+#define COBJMACROS
+#include "winbase.h"
+#include "objbase.h"
+
+#include "dxgi1_6.h"
+#ifdef DXCORE_INIT_GUID
+#include "initguid.h"
+#endif
+
+#include "dxcore.h"
+#include "dxcore_interface.h"
+
+// IDXCoreAdapterFactory
+struct dxcore_factory {
+    IDXCoreAdapterFactory IDXCoreAdapterFactory_iface;
+    LONG refcount;
+};
+
+HRESULT dxcore_factory_create(REFIID iid, void** factory);
+
+// IDXCoreAdapterList
+struct dxcore_adapter_list {
+    IDXCoreAdapterList IDXCoreAdapterList_iface;
+    LONG refcount;
+    struct dxcore_factory *factory;
+    LONG len;
+    IDXGIFactory *dxgi_factory;
+    struct dxcore_adapter **adapters;
+};
+
+
+// IDXCoreAdapter
+struct dxcore_adapter {
+    IDXCoreAdapter IDXCoreAdapter_iface;
+    LONG refcount;
+    struct dxcore_factory *factory;
+    IDXGIAdapter *adapter;
+};
+
+HRESULT dxcore_adapter_create(
+    struct dxcore_factory *factory,
+    IDXGIAdapter *adapter,
+    struct dxcore_adapter **ppv
+);
+
